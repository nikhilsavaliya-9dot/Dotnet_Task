// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using test.Data;

#nullable disable

namespace test.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250123060013_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("test.Models.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountsCreatorURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AndroidBuild")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ApiBaseUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DemoAccountNodeId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("text");

                    b.Property<bool>("ForceUpgrade")
                        .HasColumnType("boolean");

                    b.Property<string>("HelpPageUrl")
                        .HasColumnType("text");

                    b.Property<string>("IpAddressV4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhysicalAddress")
                        .HasColumnType("text");

                    b.Property<string>("PlatformFeatures")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrivacyPolicyUrl")
                        .HasColumnType("text");

                    b.Property<bool>("Suspended")
                        .HasColumnType("boolean");

                    b.Property<string>("TermsOfServiceUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text");

                    b.Property<string>("WhatsNew")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("XUrl")
                        .HasColumnType("text");

                    b.Property<string>("YouTubeUrl")
                        .HasColumnType("text");

                    b.Property<string>("iOSBuild")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountsCreatorURL = "https://accounts.9dottech.com",
                            AcquisitionDate = new DateTime(2022, 8, 14, 18, 30, 0, 0, DateTimeKind.Utc),
                            Address = "456 Innovation Avenue, Tech Park",
                            AndroidBuild = "3.2.1",
                            ApiBaseUrl = "https://api.9dottech.com",
                            Canceled = false,
                            CompanyName = "9dot Technology",
                            ContactNumber = "+1-800-999-4567",
                            CreatedAt = new DateTime(2025, 1, 23, 6, 0, 13, 295, DateTimeKind.Utc).AddTicks(2769),
                            DemoAccountNodeId = 909,
                            Email = "contact@9dottech.com",
                            FacebookUrl = "https://facebook.com/9dottech",
                            ForceUpgrade = true,
                            HelpPageUrl = "https://9dottech.com/help",
                            IpAddressV4 = "192.168.9.9",
                            LinkedInUrl = "https://linkedin.com/company/9dottech",
                            LogoUrl = "https://9dottech.com/logo.png",
                            MacAddress = "00-1A-2B-3C-4D-5E",
                            PhysicalAddress = "456 Innovation Avenue, Tech Park",
                            PlatformFeatures = "Analytics, Automation, Cloud Solutions",
                            PrivacyPolicyUrl = "https://9dottech.com/privacy",
                            Suspended = false,
                            TermsOfServiceUrl = "https://9dottech.com/terms",
                            UpdatedAt = new DateTime(2025, 1, 23, 6, 0, 13, 295, DateTimeKind.Utc).AddTicks(2770),
                            WebsiteUrl = "https://9dottech.com",
                            WhatsNew = "New dashboard design and enhanced security",
                            XUrl = "https://x.com/9dottech",
                            YouTubeUrl = "https://youtube.com/9dottech",
                            iOSBuild = "4.0.0"
                        });
                });

            modelBuilder.Entity("test.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "admin@yopmail.com",
                            FullName = "Admin",
                            IsActive = true,
                            IsDelete = false,
                            Password = "Admin@123",
                            PhoneNo = "8744125833",
                            RoleId = 1
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
